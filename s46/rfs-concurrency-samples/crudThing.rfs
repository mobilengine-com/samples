server program crudThing for form things
using reftab counter;
using reftab thing;
{
  // trace form;
  var rgc = db.counter.Read({type: "thing"});
  trace "counters in the begining", rgc;
  
  if (rgc.Count() == 0) {
    db.counter.Insert({type: "thing", counter: 1});
  }

  Sleep(form.nWait.number);

  foreach (var row in form.t.rows) 
  {
    var rgth = db.thing.Read({guid: row.rec.guid});
    //trace row.rec, rgth;  
    if (rgth.Count() == 0) {
        rgc = db.counter.Lock({type: "thing"});
        trace "inserting, counters after locking", rgc;
        var c = rgc[0].counter;
        var thing = {guid: row.rec.guid, name: row.rec.name, number: row.rec.number, 
          ver: 0,
          counter: c};
        trace "new thing", thing;

        db.thing.Insert(thing);
        db.counter.Update({type: "thing"}, {type: "thing", counter: c+1});
    }
  }

  foreach (var row in form.t.rows)
  {
    db.thing.Lock({guid: row.rec.guid});
  }

  Sleep(form.nWaitLocked.number);
  
  foreach (var row in form.t.rows)
  {
    var rgth = db.thing.Read({guid: row.rec.guid});
    // ver check for opt. lock?
    if (row.rec.name != row.tbName.text || row.rec.number != row.n1.number) {
      if (row.rec.ver != rgth[0].ver) {
        // prevent overwrite
      } else {
        db.thing.Update({guid: row.rec.guid}, {guid: row.rec.guid, name: row.tbName.text, 
          number: row.n1.number, ver: rgth[0].ver+1, counter: rgth[0].counter});
      }
    }
  }

}